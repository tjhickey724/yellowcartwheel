<%- include('bootheader') -%>
<%- include('menubarC19') -%>


	<div class="jumbotron">
    <h1>Latest Covid19 data for <%= states %></h1>
		<p> This data is from an API provided by
			<a href="https://covidtracking.com/">
				https://covidtracking.com/ </a>
				<br>
				and was last updated  as of <%= dateChecked %>
				<br>
				More details at <a href="/about">this link</a>
				<br>
				They just added the number of "hospitalized"
				to the daily data on 3/22/2020.
			</p>
			<h2><a href="/">Back to main page</a></h2>
  </div>

	<div class="chart-container" style="position: relative; height:90vh">
    <canvas id="canvas"></canvas>
  </div>

	<form method="post" action="/us">
		<input class="btn btn-lg btn-danger" type="submit">

	<div class="row">
		<div class="col">
			<h2> State to visualize </h2>
			<div class="btn-group-toggle" data-toggle="buttons">

				<% for (let i in usstates) {
					let s = usstates[i] %>
						<label class="btn btn-small btn-primary <% if (states.includes(i)) {%> active <% } %>">
							<br><input type="checkbox" 
										 name="state" value=<%=i %> autocomplete="off"
							 <% if (states.includes(i)) {%> checked <% } %> > <%= i %>
						 </label>
					<% } %>
			</div>
		</div>

		<div class="col">
			<h2>Fields to show</h2>
			<% keysToIgnore="date state checkTimeEt dateChecked dateModified fips hash lastUpdateEt commercialScore grade dataQualityGrade positiveScore negativeRegularScore negativeScore score pending"
			%>
			<% const datakeys = Object.keys(data[data.length-1]) %>

			<div class="btn-group-toggle" data-toggle="buttons">

				<% for (let i in datakeys.sort()){
					   let d = datakeys[i]
						 if (keysToIgnore.includes(d)){continue}
						 %>
					<label class="btn btn-small btn-info <% if (fields.includes(d)) {%> active <% } %>">

						<input type="checkbox" name="fields"

						     <% if (fields.includes(d)) {%> checked <% } %>
						     value="<%= d %>"> <%= d %>
					</label>
				<% } %>
			</div>
		</div>
	</div>



<br><hr><br>

  <div class="row">
		<div class="col">
			<h6>Scale to use</h6>
			<% scales=['linear','logarithmic']
				 for (i = 0; i<scales.length; i++){
					 s = scales[i] %>
					 <br><input type="radio"
						 name="yaxistype"
						 value="<%= s %>"
						 <% if (s==yaxistype) { %> checked <% } %>
						 > <%= s %> &nbsp; &nbsp;
			<% } %>
			<% if (yaxistype=='logarithmic') { %>
				With a logarithmic plot, straight lines denote exponential growth!!<br>
				We want to see straight lines for testing, but flatter line for positive and death!
			<% } %>
		</div>

		<div class="col">
			<h6>Units to use</h6>
			<% scales=['raw','per10000']
				 for (i = 0; i<scales.length; i++){
					 s = scales[i] %>
			<br><input type="radio"
						 name="units"
						 value="<%= s %>"
						 <% if (s==units) { %> checked <% } %>
						 > <%= s %> &nbsp; &nbsp;
			<% } %>
		</div>
		<div class="col">
			<h6>WeeklyAverage or Daily or both</h6>

			<br><input type="checkbox"
						 name="daily"
						 value="daily"
						 <% if (daily) { %> checked <% } %>
						 > Show daily values and weekly averages &nbsp; &nbsp;
		</div>
	</div>

  </form>
	<div>

<% if (showData) {%>

	<% for (theState in data2){
		  let stateData = data2[theState] %>
<h1>Here is the data for <%= theState %> in tabular form</h1>
	<table class="table table-bordered table-striped">
		<thead>
			<tr>
				<% for (i in datakeys) { %>
					<td> <%= datakeys[i] %> </td>
				<% } %>
			</tr>
		</thead>
		<tbody>
			<% for (i in stateData) {%>
				<tr>
					<% for (j in datakeys) { %>
						<td>  <%= stateData[i][datakeys[j]] || '-'  %> </td>
					<% } %>
				</tr>
			<% } %>

		</tbody>
	</table>

	<% } %>
	</div>

	<% } %>
	<br>
	<br>

	<script>
		<%

	%>

		var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
		<% function weeklyaverage(nums) {
		  z=[]
		  for (i in nums) {
		        z.push(nums.slice(Math.max(i-6,0),parseInt(i)+1).reduce((t,n) => t+n)/7)
		  }
		  return z
		}
		class RandomColor {
			constructor(){
				this.r = Math.random()
				this.g = Math.random()
				this.b = Math.random()
				this.s=1
				this.r = this.r/this.s
				this.g = this.g/this.s
				this.b = this.b/this.s
			}

			changeSaturation(s){
				let s0 = (this.r+this.g+this.b)
				let s1 = (s-1)/(s0-3)
				this.r = ((1-s1)+ s1*this.r)
				this.g = ((1-s1)+ s1*this.g)
				this.b = ((1-s1)+ s1*this.b)
				return this
			}

			toHex2(x){
				return(x.toString(16))
			}

			toHex(){
				let r0 = this.toHex2(Math.min(255,Math.floor(this.r*256)))
				let g0 = this.toHex2(Math.min(255,Math.floor(this.g*256)))
				let b0 = this.toHex2(Math.min(255,Math.floor(this.b*256)))
				return "#"+r0+g0+b0
			}
		}

		%>
		var config = {
			type: 'line',
			data: {
				labels: [<%= dates %>],
				datasets: [

				<% //console.log(JSON.stringify(statepop))
				    for(let i=0; i<states.length;i++) {
						 let pop = statepop[usstates[states[i]]]/10000
						 if (units=='raw'){
							 pop=1
						 }
					   console.log("pop of "+usstates[states[i]]+" is "+pop)
					   for(let j=0; j<fields.length; j++){
							 let s = states[i]

							 let f = fields[j]
							 let c0 = (new RandomColor()).changeSaturation(0.5)
					 		let c1 = c0.toHex()
					 		let c0a = c0.changeSaturation(0.8)
					 		let c1a = c0a.toHex()
					 		console.log(`c1=${c1} c1a=${c1a}`)
							/*
							 c0 = Math.floor(Math.random()*15728640 +1048576)
							 c0a = Math.floor((2**24+c0)/2)
							 c1 = '#'+c0.toString(16)
							 c1a = '#' + c1[1]+'f'+c1[3]+'f'+c1[5]+'f'
							 console.log(`c1=${c1} c1a=${c1a}`)
							 */
							 /*
							 c0 = (new RandomColor()).changeSaturation(0.5)
							 c1 = c0.toHex()
							 c0a = c0.changeSaturation(0.8)
							 c1a = c0a.toHex()
							 console.log(`c1=${c1} c1a=${c1a}`)
							 */

							 nums = data2[s].map((x)=>(x[f]||0)/pop)
							 //console.log(JSON.stringify(nums))
							 wnums = weeklyaverage(nums)
							 %>
							 <% if (daily) { %>
							 {
								 label:'<%= s %><%= f %>',
								 fill: false,
								 backgroundColor: '<%= c1a %>',
								 borderColor: '<%= c1a %>',
								 pointRadius: 0,
								 borderDash: [5, 5],
								 data: [<%= data2[s].map(d => (d[f]||0)/pop) %>],
							 },
							 <% } %>
							 {
								 label:'<%= s %><%= f %> weekly average',
								 fill: false,
								 backgroundColor: '<%= c1 %>',
								 borderColor: '<%= c1 %>',
								 pointRadius:0,

								 data: [<%= wnums %>],
							 },
			  <% }} %>

			  ]
			},
			options: {
				responsive: true,
				maintainAspectRatio:false,
				title: {
					display: true,
					text: '<%= yaxistype %> plot of Latest Covid-19 data for <%= states %> with <%= units %> data <%= daily?"with daily data and":"" %>  weekly averages'
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				},
				legend: {
            display: true,
            labels: {
                fontColor: 'rgb(255, 99, 132)'
            }
        },
				scales: {
					xAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Date'
						}
					}],
					yAxes: [{
						display: true,
						type:'<%= yaxistype %>',
						scaleLabel: {
							display: true,
							labelString: `Value `+'<%= units %>'
						}
					}]
				}
			}
		};

		window.onload = function() {
			var ctx = document.getElementById('canvas').getContext('2d');
			window.myLine = new Chart(ctx, config);
		};
</script>



<%- include('bootfooter') -%>
